const fs = require("fs");
const { downloadMediaMessage } = require("@whiskeysockets/baileys");
const axios = require("axios");

// Fancy text (Rosemary)
function fancy(text) {
  const chars = {
    A:'ùìê',B:'ùìë',C:'ùìí',D:'ùìì',E:'ùìî',F:'ùìï',G:'ùìñ',H:'ùìó',I:'ùìò',
    J:'ùìô',K:'ùìö',L:'ùìõ',M:'ùìú',N:'ùìù',O:'ùìû',P:'ùìü',Q:'ùì†',R:'ùì°',
    S:'ùì¢',T:'ùì£',U:'ùì§',V:'ùì•',W:'ùì¶',X:'ùìß',Y:'ùì®',Z:'ùì©',
    a:'ùì™',b:'ùì´',c:'ùì¨',d:'ùì≠',e:'ùìÆ',f:'ùìØ',g:'ùì∞',h:'ùì±',i:'ùì≤',
    j:'ùì≥',k:'ùì¥',l:'ùìµ',m:'ùì∂',n:'ùì∑',o:'ùì∏',p:'ùìπ',q:'ùì∫',r:'ùìª',
    s:'ùìº',t:'ùìΩ',u:'ùìæ',v:'ùìø',w:'ùîÄ',x:'ùîÅ',y:'ùîÇ',z:'ùîÉ'
  };
  return text.split('').map(c=>chars[c]||c).join('');
}

// Img2Img function
async function stabilityImageToImage(imageBuffer, prompt) {
  try {
    const apiKey = process.env.STABILITY_KEY || "sk-GPrKV4TIpQ8DHxH5LNbwi5xEIxyVsu47r2SoZrcLjjZbmGuK";
    const response = await axios.post(
      "https://api.stability.ai/v1/generation/stable-diffusion-512-v2-1/image-to-image",
      {
        init_image: imageBuffer.toString("base64"),
        text_prompts: [{ text: prompt }],
        cfg_scale: 7,
        strength: 0.65,
        samples: 1,
        steps: 30
      },
      {
        headers: {
          Authorization: `Bearer ${apiKey}`,
          Accept: "application/json",
          "Content-Type": "application/json"
        }
      }
    );

    const imageBase64 = response.data.artifacts[0].base64;
    const imagePath = "./stability_img2img.png";
    fs.writeFileSync(imagePath, Buffer.from(imageBase64, "base64"));
    return imagePath;
  } catch (e) {
    console.error("‚ùå Stability Img2Img Error:", e.response?.data || e.message);
    return null;
  }
}

// Command module
module.exports = {
  name: "imagine",
  description: "Transform your image using AI üñåÔ∏è",
  async execute(sock, msg) {
    const from = msg.key.remoteJid;
    const text = msg.message?.conversation?.trim() || "A beautiful digital art";

    // React to command
    await sock.sendMessage(from, { react: { text: "üé®", key: msg.key } });

    // Ensure user replied to an image
    if (!msg.message?.imageMessage && !msg.message?.extendedTextMessage?.contextInfo?.quotedMessage?.imageMessage) {
      return await sock.sendMessage(from, { text: fancy("üñºÔ∏è Reply to an image with prompt or send an image with text!") });
    }

    // Download media
    let buffer;
    if (msg.message?.imageMessage) {
      buffer = await downloadMediaMessage(msg, "buffer");
    } else {
      buffer = await downloadMediaMessage(
        { message: msg.message.extendedTextMessage.contextInfo.quotedMessage },
        "buffer"
      );
    }

    await sock.sendMessage(from, { text: fancy("üé® *Transforming your image...*" ) });

    // Generate AI image
    const imagePath = await stabilityImageToImage(buffer, text);
    if (imagePath) {
      await sock.sendMessage(from, {
        image: fs.readFileSync(imagePath),
        caption: fancy(`‚ú® *AI Image Generated*\n${text}`)
      });
    } else {
      await sock.sendMessage(from, { text: fancy("‚ö†Ô∏è Failed to transform the image.") });
    }
  }
};
